# import subprocess
# import rclpy
# from rclpy.action import ActionServer
# from rclpy.node import Node
# from nav2_msgs.action import NavigateToPose

# class NavigationServer(Node):
#     def __init__(self):
#         super().__init__('navigation_server')
#         self._action_server = ActionServer(
#             self,
#             NavigateToPose,
#             'NavigateToPose',
#             self.execute_callback)

#     def execute_callback(self, goal_handle):
#         self.get_logger().info('Received navigation request')

#         # Launch the nav_demo.launch.py file
#         subprocess.run(['ros2', 'launch', 'navigation_demos', 'nav_demo.launch.py'])

#         result = NavigateToPose.Result()
#         result.result = NavigateToPose.Result.RESULT_SUCCESS
#         return result

# def main(args=None):
#     rclpy.init(args=args)
#     navigation_server = NavigationServer()
#     rclpy.spin(navigation_server)
#     navigation_server.destroy_node()
#     rclpy.shutdown()

# if __name__ == '__main__':
#     main()



---------------------------

# import rclpy
# from rclpy.node import Node
# from rclpy.action import ActionClient
# from geometry_msgs.msg import PoseStamped
# from nav2_msgs.action import NavigateToPose

# class NavigationClient(Node):

#     def __init__(self):
#         super().__init__('navigation_client')
#         self._action_client = ActionClient(self, NavigateToPose, 'NavigateToPose')

#     def send_goal(self):
#         goal_msg = NavigateToPose.Goal()
#         goal_msg.pose.pose.position.x = 2.0
#         goal_msg.pose.pose.position.y = 1.0
#         goal_msg.pose.pose.position.z = 0.0
#         goal_msg.pose.pose.orientation.x = 0.0
#         goal_msg.pose.pose.orientation.y = 0.0
#         goal_msg.pose.pose.orientation.z = 0.0
#         goal_msg.pose.pose.orientation.w = 1.0
#         goal_msg.pose.header.frame_id = 'map'

#         self._action_client.wait_for_server()

#         goal_handle_future = self._action_client.send_goal_async(goal_msg)
#         rclpy.spin_until_future_complete(self, goal_handle_future)
#         goal_handle = goal_handle_future.result()

#         result_future = self._action_client._get_result_async(goal_handle)
#         rclpy.spin_until_future_complete(self, result_future)
#         response = result_future.result()

#         if response.result == NavigateToPose.Result.RESULT_SUCCESS:
#             self.get_logger().info('Navigation succeeded')
#         else:
#             self.get_logger().info('Navigation failed')
        

# def main(args=None):
#     rclpy.init(args=args)

#     navigation_client = NavigationClient()
#     navigation_client.send_goal()

#     rclpy.spin(navigation_client)

#     navigation_client.destroy_node()
#     rclpy.shutdown()

# if __name__ == '__main__':
#     main()
